import * as C from "../core.js";
export declare function foldChannel_<Env, Env1, Env2, InErr, InErr1, InErr2, InElem, InElem1, InElem2, InDone, InDone1, InDone2, OutErr, OutErr1, OutErr2, OutElem, OutElem1, OutElem2, OutDone, OutDone1, OutDone2>(self: C.Channel<Env, InErr, InElem, InDone, OutErr, OutElem, OutDone>, onErr: (oErr: OutErr) => C.Channel<Env1, InErr1, InElem1, InDone1, OutErr1, OutElem1, OutDone1>, onSucc: (oErr: OutDone) => C.Channel<Env2, InErr2, InElem2, InDone2, OutErr2, OutElem2, OutDone2>): C.Channel<Env & Env1 & Env2, InErr & InErr1 & InErr2, InElem & InElem1 & InElem2, InDone & InDone1 & InDone2, OutErr2 | OutErr1, OutElem | OutElem2 | OutElem1, OutDone2 | OutDone1>;
/**
 * @ets_data_first foldChannel_
 */
export declare function foldChannel<Env1, InErr1, InElem1, InDone1, OutErr, OutErr1, OutElem1, OutDone, OutDone1>(onErr: (oErr: OutErr) => C.Channel<Env1, InErr1, InElem1, InDone1, OutErr1, OutElem1, OutDone1>, onSucc: (oErr: OutDone) => C.Channel<Env1, InErr1, InElem1, InDone1, OutErr1, OutElem1, OutDone1>): <Env, InErr, InElem, InDone, OutElem>(self: C.Channel<Env, InErr, InElem, InDone, OutErr, OutElem, OutDone>) => C.Channel<Env & Env1, InErr & InErr1, InElem & InElem1, InDone & InDone1, OutErr1, OutElem1 | OutElem, OutDone1>;
//# sourceMappingURL=foldChannel.d.ts.map