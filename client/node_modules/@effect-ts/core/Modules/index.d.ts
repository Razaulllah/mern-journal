import "../Operator/index.js";
import type { Effect, EffectURI } from "@effect-ts/system/Effect";
import type { Async } from "../Async/index.js";
import type { Bounded } from "../Bounded/index.js";
import type { Closure } from "../Closure/index.js";
import type { Array } from "../Collections/Immutable/Array/index.js";
import type { Chunk } from "../Collections/Immutable/Chunk/index.js";
import type { Dictionary } from "../Collections/Immutable/Dictionary/index.js";
import type { List } from "../Collections/Immutable/List/index.js";
import type { NonEmptyArray } from "../Collections/Immutable/NonEmptyArray/index.js";
import type { Commutative } from "../Commutative/index.js";
import type { Const } from "../Const/index.js";
import type { Layer } from "../Effect/Layer/index.js";
import type { Either } from "../Either/index.js";
import type { Equal } from "../Equal/index.js";
import type { FreeAssociative } from "../FreeAssociative/index.js";
import type { Id } from "../Id/index.js";
import type { Identity } from "../Identity/index.js";
import type { Ix, IxC } from "../IndexedT/index.js";
import type { Inverse } from "../Inverse/index.js";
import type { IO } from "../IO/index.js";
import type { Option } from "../Option/index.js";
import type { Ord } from "../Ord/index.js";
import type { Reader } from "../Reader/index.js";
import type { Tree } from "../RoseTree/index.js";
import type { Show } from "../Show/index.js";
import type { StateIn, StateOut } from "../StateT/Classic/index.js";
import type { Sync } from "../Sync/index.js";
import type { XPure } from "../XPure/index.js";
import type { XIO } from "../XPure/XIO/index.js";
import type { XReader } from "../XPure/XReader/index.js";
import type { XState } from "../XPure/XState/index.js";
export { EffectURI } from "@effect-ts/system/Effect";
export declare const ArrayURI = "Array";
export declare type ArrayURI = typeof ArrayURI;
export declare const NonEmptyArrayURI = "NonEmptyArray";
export declare type NonEmptyArrayURI = typeof NonEmptyArrayURI;
export declare const BoundedURI = "Bounded";
export declare type BoundedURI = typeof BoundedURI;
export declare const ClosureURI = "Closure";
export declare type ClosureURI = typeof ClosureURI;
export declare const CommutativeURI = "Commutative";
export declare type CommutativeURI = typeof CommutativeURI;
export declare const EitherURI = "Either";
export declare type EitherURI = typeof EitherURI;
export declare const EqualURI = "Equal";
export declare type EqualURI = typeof EqualURI;
export declare const IdentityURI = "Identity";
export declare type IdentityURI = typeof IdentityURI;
export declare const InverseURI = "Inverse";
export declare type InverseURI = typeof InverseURI;
export declare const IterableURI = "IterableURI";
export declare type IterableURI = typeof IterableURI;
export declare const OrdURI = "Ord";
export declare type OrdURI = typeof OrdURI;
export declare const DictionaryURI = "Dictionary";
export declare type DictionaryURI = typeof DictionaryURI;
export declare const ShowURI = "Show";
export declare type ShowURI = typeof ShowURI;
export declare const XIOURI = "XIO";
export declare type XIOURI = typeof XIOURI;
export declare const XReaderURI = "XReader";
export declare type XReaderURI = typeof XReaderURI;
export declare const XStateURI = "XState";
export declare type XStateURI = typeof XStateURI;
export declare const ReaderURI = "Reader";
export declare type ReaderURI = typeof ReaderURI;
export declare const StateInURI = "StateIn";
export declare type StateInURI = typeof StateInURI;
export declare const ParametricStateInURI = "ParametricStateIn";
export declare type ParametricStateInURI = typeof ParametricStateInURI;
export declare const StateOutURI = "StateOut";
export declare type StateOutURI = typeof StateOutURI;
export declare const IxURI = "Ix";
export declare type IxURI = typeof IxURI;
export declare const TaskURI = "Task";
export declare type TaskURI = typeof TaskURI;
export declare const ConstURI = "Const";
export declare type ConstURI = typeof ConstURI;
export declare const LayerURI = "Layer";
export declare type LayerURI = typeof LayerURI;
export declare const SyncURI = "Sync";
export declare type SyncURI = typeof SyncURI;
export declare const XPureURI = "XPure";
export declare type XPureURI = typeof XPureURI;
export declare const IOURI = "IO";
export declare type IOURI = typeof IOURI;
export declare const XPureReaderCategoryURI = "XPureReaderCategory";
export declare type XPureReaderCategoryURI = typeof XPureReaderCategoryURI;
export declare const XPureStateCategoryURI = "XPureStateCategory";
export declare type XPureStateCategoryURI = typeof XPureStateCategoryURI;
export declare const IdURI = "Id";
export declare type IdURI = typeof IdURI;
export declare const EffectCategoryURI = "EffectCategory";
export declare type EffectCategoryURI = typeof EffectCategoryURI;
export declare const FreeAssociativeURI = "FreeAssociative";
export declare type FreeAssociativeURI = typeof FreeAssociativeURI;
export declare const AsyncURI = "Async";
export declare type AsyncURI = typeof AsyncURI;
export declare const TreeURI = "Tree";
export declare type TreeURI = typeof TreeURI;
export declare const OptionURI = "Option";
export declare type OptionURI = typeof OptionURI;
export declare const ListURI = "List";
export declare type ListURI = typeof ListURI;
export declare const ChunkURI = "Chunk";
export declare type ChunkURI = typeof ChunkURI;
declare module "../Prelude/HKT/hkt.js" {
    interface URItoKind<FC, TC, K, Q, W, X, I, S, R, E, A> {
        [ArrayURI]: Array<A>;
        [BoundedURI]: Bounded<A>;
        [ClosureURI]: Closure<A>;
        [CommutativeURI]: Commutative<A>;
        [EitherURI]: Either<E, A>;
        [EqualURI]: Equal<A>;
        [IdentityURI]: Identity<A>;
        [InverseURI]: Inverse<A>;
        [IterableURI]: Iterable<A>;
        [OrdURI]: Ord<A>;
        [DictionaryURI]: Dictionary<A>;
        [ShowURI]: Show<A>;
        [EffectURI]: Effect<R, E, A>;
        [EffectCategoryURI]: Effect<I, E, A>;
        [XIOURI]: XIO<A>;
        [XReaderURI]: XReader<R, A>;
        [XStateURI]: XState<S, A>;
        [ReaderURI]: Reader<R, A>;
        [ConstURI]: Const<E, A>;
        [LayerURI]: Layer<R, E, A>;
        [SyncURI]: Sync<R, E, A>;
        [XPureURI]: XPure<X, S, S, R, E, A>;
        [XPureReaderCategoryURI]: XPure<X, S, S, I, E, A>;
        [XPureStateCategoryURI]: XPure<X, I, A, R, E, A>;
        [IdURI]: Id<A>;
        [NonEmptyArrayURI]: NonEmptyArray<A>;
        [FreeAssociativeURI]: FreeAssociative<A>;
        [AsyncURI]: Async<R, E, A>;
        [TreeURI]: Tree<A>;
        [OptionURI]: Option<A>;
        [ListURI]: List<A>;
        [IOURI]: IO<A>;
        [StateInURI]: StateIn<S, A>;
        [StateOutURI]: StateOut<S, A>;
        [IxURI]: TC extends IxC<infer _I, infer _O> ? Ix<_I, _O, A> : any;
        [ChunkURI]: Chunk<A>;
    }
    interface URItoIndex<K> {
        [ListURI]: number;
        [ArrayURI]: number;
        [ChunkURI]: number;
        [NonEmptyArrayURI]: number;
        [DictionaryURI]: string;
    }
}
//# sourceMappingURL=index.d.ts.map