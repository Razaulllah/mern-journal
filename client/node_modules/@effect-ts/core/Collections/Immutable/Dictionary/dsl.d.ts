import * as P from "../../../Prelude/index.js";
/**
 * Like traverse(identity)
 */
export declare const sequence: <F extends P.URIS, FC>(App: P.Covariant<F, FC> & P.IdentityBoth<F, FC>) => <K, Q, W, X, I, S, R, E, FK, FQ, FW, FX, FI, FS, FR, FE, A>(_: import("@effect-ts/system/Collections/Immutable/Dictionary/index.js").Dictionary<F extends [any, ...infer Next] ? P.URItoKind<F[0]["_C"], FC, P.OrFix<"K", F[0]["_C"], P.OrFix<"K", FC, FK>>, P.OrFix<"Q", F[0]["_C"], P.OrFix<"Q", FC, FQ>>, P.OrFix<"W", F[0]["_C"], P.OrFix<"W", FC, FW>>, P.OrFix<"X", F[0]["_C"], P.OrFix<"X", FC, FX>>, P.OrFix<"I", F[0]["_C"], P.OrFix<"I", FC, FI>>, P.OrFix<"S", F[0]["_C"], P.OrFix<"S", FC, FS>>, P.OrFix<"R", F[0]["_C"], P.OrFix<"R", FC, FR>>, P.OrFix<"E", F[0]["_C"], P.OrFix<"E", FC, FE>>, Next extends [any, ...infer Next] ? P.URItoKind<Next[0]["_C"], FC, P.OrFix<"K", Next[0]["_C"], P.OrFix<"K", FC, FK>>, P.OrFix<"Q", Next[0]["_C"], P.OrFix<"Q", FC, FQ>>, P.OrFix<"W", Next[0]["_C"], P.OrFix<"W", FC, FW>>, P.OrFix<"X", Next[0]["_C"], P.OrFix<"X", FC, FX>>, P.OrFix<"I", Next[0]["_C"], P.OrFix<"I", FC, FI>>, P.OrFix<"S", Next[0]["_C"], P.OrFix<"S", FC, FS>>, P.OrFix<"R", Next[0]["_C"], P.OrFix<"R", FC, FR>>, P.OrFix<"E", Next[0]["_C"], P.OrFix<"E", FC, FE>>, Next extends [any, ...infer Next] ? P.URItoKind<Next[0]["_C"], FC, P.OrFix<"K", Next[0]["_C"], P.OrFix<"K", FC, FK>>, P.OrFix<"Q", Next[0]["_C"], P.OrFix<"Q", FC, FQ>>, P.OrFix<"W", Next[0]["_C"], P.OrFix<"W", FC, FW>>, P.OrFix<"X", Next[0]["_C"], P.OrFix<"X", FC, FX>>, P.OrFix<"I", Next[0]["_C"], P.OrFix<"I", FC, FI>>, P.OrFix<"S", Next[0]["_C"], P.OrFix<"S", FC, FS>>, P.OrFix<"R", Next[0]["_C"], P.OrFix<"R", FC, FR>>, P.OrFix<"E", Next[0]["_C"], P.OrFix<"E", FC, FE>>, Next extends [any, ...infer Next] ? P.URItoKind<Next[0]["_C"], FC, P.OrFix<"K", Next[0]["_C"], P.OrFix<"K", FC, FK>>, P.OrFix<"Q", Next[0]["_C"], P.OrFix<"Q", FC, FQ>>, P.OrFix<"W", Next[0]["_C"], P.OrFix<"W", FC, FW>>, P.OrFix<"X", Next[0]["_C"], P.OrFix<"X", FC, FX>>, P.OrFix<"I", Next[0]["_C"], P.OrFix<"I", FC, FI>>, P.OrFix<"S", Next[0]["_C"], P.OrFix<"S", FC, FS>>, P.OrFix<"R", Next[0]["_C"], P.OrFix<"R", FC, FR>>, P.OrFix<"E", Next[0]["_C"], P.OrFix<"E", FC, FE>>, Next extends [any, ...infer Next] ? P.URItoKind<Next[0]["_C"], FC, P.OrFix<"K", Next[0]["_C"], P.OrFix<"K", FC, FK>>, P.OrFix<"Q", Next[0]["_C"], P.OrFix<"Q", FC, FQ>>, P.OrFix<"W", Next[0]["_C"], P.OrFix<"W", FC, FW>>, P.OrFix<"X", Next[0]["_C"], P.OrFix<"X", FC, FX>>, P.OrFix<"I", Next[0]["_C"], P.OrFix<"I", FC, FI>>, P.OrFix<"S", Next[0]["_C"], P.OrFix<"S", FC, FS>>, P.OrFix<"R", Next[0]["_C"], P.OrFix<"R", FC, FR>>, P.OrFix<"E", Next[0]["_C"], P.OrFix<"E", FC, FE>>, Next extends [any, ...infer Next] ? P.URItoKind<Next[0]["_C"], FC, P.OrFix<"K", Next[0]["_C"], P.OrFix<"K", FC, FK>>, P.OrFix<"Q", Next[0]["_C"], P.OrFix<"Q", FC, FQ>>, P.OrFix<"W", Next[0]["_C"], P.OrFix<"W", FC, FW>>, P.OrFix<"X", Next[0]["_C"], P.OrFix<"X", FC, FX>>, P.OrFix<"I", Next[0]["_C"], P.OrFix<"I", FC, FI>>, P.OrFix<"S", Next[0]["_C"], P.OrFix<"S", FC, FS>>, P.OrFix<"R", Next[0]["_C"], P.OrFix<"R", FC, FR>>, P.OrFix<"E", Next[0]["_C"], P.OrFix<"E", FC, FE>>, Next extends [any, ...infer Next] ? P.URItoKind<Next[0]["_C"], FC, P.OrFix<"K", Next[0]["_C"], P.OrFix<"K", FC, FK>>, P.OrFix<"Q", Next[0]["_C"], P.OrFix<"Q", FC, FQ>>, P.OrFix<"W", Next[0]["_C"], P.OrFix<"W", FC, FW>>, P.OrFix<"X", Next[0]["_C"], P.OrFix<"X", FC, FX>>, P.OrFix<"I", Next[0]["_C"], P.OrFix<"I", FC, FI>>, P.OrFix<"S", Next[0]["_C"], P.OrFix<"S", FC, FS>>, P.OrFix<"R", Next[0]["_C"], P.OrFix<"R", FC, FR>>, P.OrFix<"E", Next[0]["_C"], P.OrFix<"E", FC, FE>>, Next extends [any, ...infer Next] ? P.URItoKind<Next[0]["_C"], FC, P.OrFix<"K", Next[0]["_C"], P.OrFix<"K", FC, FK>>, P.OrFix<"Q", Next[0]["_C"], P.OrFix<"Q", FC, FQ>>, P.OrFix<"W", Next[0]["_C"], P.OrFix<"W", FC, FW>>, P.OrFix<"X", Next[0]["_C"], P.OrFix<"X", FC, FX>>, P.OrFix<"I", Next[0]["_C"], P.OrFix<"I", FC, FI>>, P.OrFix<"S", Next[0]["_C"], P.OrFix<"S", FC, FS>>, P.OrFix<"R", Next[0]["_C"], P.OrFix<"R", FC, FR>>, P.OrFix<"E", Next[0]["_C"], P.OrFix<"E", FC, FE>>, Next extends [any, ...infer Next] ? P.URItoKind<Next[0]["_C"], FC, P.OrFix<"K", Next[0]["_C"], P.OrFix<"K", FC, FK>>, P.OrFix<"Q", Next[0]["_C"], P.OrFix<"Q", FC, FQ>>, P.OrFix<"W", Next[0]["_C"], P.OrFix<"W", FC, FW>>, P.OrFix<"X", Next[0]["_C"], P.OrFix<"X", FC, FX>>, P.OrFix<"I", Next[0]["_C"], P.OrFix<"I", FC, FI>>, P.OrFix<"S", Next[0]["_C"], P.OrFix<"S", FC, FS>>, P.OrFix<"R", Next[0]["_C"], P.OrFix<"R", FC, FR>>, P.OrFix<"E", Next[0]["_C"], P.OrFix<"E", FC, FE>>, Next extends [any, ...infer Next] ? P.URItoKind<Next[0]["_C"], FC, P.OrFix<"K", Next[0]["_C"], P.OrFix<"K", FC, FK>>, P.OrFix<"Q", Next[0]["_C"], P.OrFix<"Q", FC, FQ>>, P.OrFix<"W", Next[0]["_C"], P.OrFix<"W", FC, FW>>, P.OrFix<"X", Next[0]["_C"], P.OrFix<"X", FC, FX>>, P.OrFix<"I", Next[0]["_C"], P.OrFix<"I", FC, FI>>, P.OrFix<"S", Next[0]["_C"], P.OrFix<"S", FC, FS>>, P.OrFix<"R", Next[0]["_C"], P.OrFix<"R", FC, FR>>, P.OrFix<"E", Next[0]["_C"], P.OrFix<"E", FC, FE>>, Next extends [any, ...infer Next] ? P.URItoKind<Next[0]["_C"], FC, P.OrFix<"K", Next[0]["_C"], P.OrFix<"K", FC, FK>>, P.OrFix<"Q", Next[0]["_C"], P.OrFix<"Q", FC, FQ>>, P.OrFix<"W", Next[0]["_C"], P.OrFix<"W", FC, FW>>, P.OrFix<"X", Next[0]["_C"], P.OrFix<"X", FC, FX>>, P.OrFix<"I", Next[0]["_C"], P.OrFix<"I", FC, FI>>, P.OrFix<"S", Next[0]["_C"], P.OrFix<"S", FC, FS>>, P.OrFix<"R", Next[0]["_C"], P.OrFix<"R", FC, FR>>, P.OrFix<"E", Next[0]["_C"], P.OrFix<"E", FC, FE>>, any>[Next[0]["_F"]] : A>[Next[0]["_F"]] : A>[Next[0]["_F"]] : A>[Next[0]["_F"]] : A>[Next[0]["_F"]] : A>[Next[0]["_F"]] : A>[Next[0]["_F"]] : A>[Next[0]["_F"]] : A>[Next[0]["_F"]] : A>[Next[0]["_F"]] : A>[F[0]["_F"]] : A>) => F extends [any, ...infer Next] ? P.URItoKind<F[0]["_C"], FC, P.OrFix<"K", F[0]["_C"], P.OrFix<"K", FC, FK>>, P.OrFix<"Q", F[0]["_C"], P.OrFix<"Q", FC, FQ>>, P.OrFix<"W", F[0]["_C"], P.OrFix<"W", FC, FW>>, P.OrFix<"X", F[0]["_C"], P.OrFix<"X", FC, FX>>, P.OrFix<"I", F[0]["_C"], P.OrFix<"I", FC, FI>>, P.OrFix<"S", F[0]["_C"], P.OrFix<"S", FC, FS>>, P.OrFix<"R", F[0]["_C"], P.OrFix<"R", FC, FR>>, P.OrFix<"E", F[0]["_C"], P.OrFix<"E", FC, FE>>, Next extends [any, ...infer Next] ? P.URItoKind<Next[0]["_C"], FC, P.OrFix<"K", Next[0]["_C"], P.OrFix<"K", FC, FK>>, P.OrFix<"Q", Next[0]["_C"], P.OrFix<"Q", FC, FQ>>, P.OrFix<"W", Next[0]["_C"], P.OrFix<"W", FC, FW>>, P.OrFix<"X", Next[0]["_C"], P.OrFix<"X", FC, FX>>, P.OrFix<"I", Next[0]["_C"], P.OrFix<"I", FC, FI>>, P.OrFix<"S", Next[0]["_C"], P.OrFix<"S", FC, FS>>, P.OrFix<"R", Next[0]["_C"], P.OrFix<"R", FC, FR>>, P.OrFix<"E", Next[0]["_C"], P.OrFix<"E", FC, FE>>, Next extends [any, ...infer Next] ? P.URItoKind<Next[0]["_C"], FC, P.OrFix<"K", Next[0]["_C"], P.OrFix<"K", FC, FK>>, P.OrFix<"Q", Next[0]["_C"], P.OrFix<"Q", FC, FQ>>, P.OrFix<"W", Next[0]["_C"], P.OrFix<"W", FC, FW>>, P.OrFix<"X", Next[0]["_C"], P.OrFix<"X", FC, FX>>, P.OrFix<"I", Next[0]["_C"], P.OrFix<"I", FC, FI>>, P.OrFix<"S", Next[0]["_C"], P.OrFix<"S", FC, FS>>, P.OrFix<"R", Next[0]["_C"], P.OrFix<"R", FC, FR>>, P.OrFix<"E", Next[0]["_C"], P.OrFix<"E", FC, FE>>, Next extends [any, ...infer Next] ? P.URItoKind<Next[0]["_C"], FC, P.OrFix<"K", Next[0]["_C"], P.OrFix<"K", FC, FK>>, P.OrFix<"Q", Next[0]["_C"], P.OrFix<"Q", FC, FQ>>, P.OrFix<"W", Next[0]["_C"], P.OrFix<"W", FC, FW>>, P.OrFix<"X", Next[0]["_C"], P.OrFix<"X", FC, FX>>, P.OrFix<"I", Next[0]["_C"], P.OrFix<"I", FC, FI>>, P.OrFix<"S", Next[0]["_C"], P.OrFix<"S", FC, FS>>, P.OrFix<"R", Next[0]["_C"], P.OrFix<"R", FC, FR>>, P.OrFix<"E", Next[0]["_C"], P.OrFix<"E", FC, FE>>, Next extends [any, ...infer Next] ? P.URItoKind<Next[0]["_C"], FC, P.OrFix<"K", Next[0]["_C"], P.OrFix<"K", FC, FK>>, P.OrFix<"Q", Next[0]["_C"], P.OrFix<"Q", FC, FQ>>, P.OrFix<"W", Next[0]["_C"], P.OrFix<"W", FC, FW>>, P.OrFix<"X", Next[0]["_C"], P.OrFix<"X", FC, FX>>, P.OrFix<"I", Next[0]["_C"], P.OrFix<"I", FC, FI>>, P.OrFix<"S", Next[0]["_C"], P.OrFix<"S", FC, FS>>, P.OrFix<"R", Next[0]["_C"], P.OrFix<"R", FC, FR>>, P.OrFix<"E", Next[0]["_C"], P.OrFix<"E", FC, FE>>, Next extends [any, ...infer Next] ? P.URItoKind<Next[0]["_C"], FC, P.OrFix<"K", Next[0]["_C"], P.OrFix<"K", FC, FK>>, P.OrFix<"Q", Next[0]["_C"], P.OrFix<"Q", FC, FQ>>, P.OrFix<"W", Next[0]["_C"], P.OrFix<"W", FC, FW>>, P.OrFix<"X", Next[0]["_C"], P.OrFix<"X", FC, FX>>, P.OrFix<"I", Next[0]["_C"], P.OrFix<"I", FC, FI>>, P.OrFix<"S", Next[0]["_C"], P.OrFix<"S", FC, FS>>, P.OrFix<"R", Next[0]["_C"], P.OrFix<"R", FC, FR>>, P.OrFix<"E", Next[0]["_C"], P.OrFix<"E", FC, FE>>, Next extends [any, ...infer Next] ? P.URItoKind<Next[0]["_C"], FC, P.OrFix<"K", Next[0]["_C"], P.OrFix<"K", FC, FK>>, P.OrFix<"Q", Next[0]["_C"], P.OrFix<"Q", FC, FQ>>, P.OrFix<"W", Next[0]["_C"], P.OrFix<"W", FC, FW>>, P.OrFix<"X", Next[0]["_C"], P.OrFix<"X", FC, FX>>, P.OrFix<"I", Next[0]["_C"], P.OrFix<"I", FC, FI>>, P.OrFix<"S", Next[0]["_C"], P.OrFix<"S", FC, FS>>, P.OrFix<"R", Next[0]["_C"], P.OrFix<"R", FC, FR>>, P.OrFix<"E", Next[0]["_C"], P.OrFix<"E", FC, FE>>, Next extends [any, ...infer Next] ? P.URItoKind<Next[0]["_C"], FC, P.OrFix<"K", Next[0]["_C"], P.OrFix<"K", FC, FK>>, P.OrFix<"Q", Next[0]["_C"], P.OrFix<"Q", FC, FQ>>, P.OrFix<"W", Next[0]["_C"], P.OrFix<"W", FC, FW>>, P.OrFix<"X", Next[0]["_C"], P.OrFix<"X", FC, FX>>, P.OrFix<"I", Next[0]["_C"], P.OrFix<"I", FC, FI>>, P.OrFix<"S", Next[0]["_C"], P.OrFix<"S", FC, FS>>, P.OrFix<"R", Next[0]["_C"], P.OrFix<"R", FC, FR>>, P.OrFix<"E", Next[0]["_C"], P.OrFix<"E", FC, FE>>, Next extends [any, ...infer Next] ? P.URItoKind<Next[0]["_C"], FC, P.OrFix<"K", Next[0]["_C"], P.OrFix<"K", FC, FK>>, P.OrFix<"Q", Next[0]["_C"], P.OrFix<"Q", FC, FQ>>, P.OrFix<"W", Next[0]["_C"], P.OrFix<"W", FC, FW>>, P.OrFix<"X", Next[0]["_C"], P.OrFix<"X", FC, FX>>, P.OrFix<"I", Next[0]["_C"], P.OrFix<"I", FC, FI>>, P.OrFix<"S", Next[0]["_C"], P.OrFix<"S", FC, FS>>, P.OrFix<"R", Next[0]["_C"], P.OrFix<"R", FC, FR>>, P.OrFix<"E", Next[0]["_C"], P.OrFix<"E", FC, FE>>, Next extends [any, ...infer Next] ? P.URItoKind<Next[0]["_C"], FC, P.OrFix<"K", Next[0]["_C"], P.OrFix<"K", FC, FK>>, P.OrFix<"Q", Next[0]["_C"], P.OrFix<"Q", FC, FQ>>, P.OrFix<"W", Next[0]["_C"], P.OrFix<"W", FC, FW>>, P.OrFix<"X", Next[0]["_C"], P.OrFix<"X", FC, FX>>, P.OrFix<"I", Next[0]["_C"], P.OrFix<"I", FC, FI>>, P.OrFix<"S", Next[0]["_C"], P.OrFix<"S", FC, FS>>, P.OrFix<"R", Next[0]["_C"], P.OrFix<"R", FC, FR>>, P.OrFix<"E", Next[0]["_C"], P.OrFix<"E", FC, FE>>, Next extends [any, ...infer Next] ? P.URItoKind<Next[0]["_C"], FC, P.OrFix<"K", Next[0]["_C"], P.OrFix<"K", FC, FK>>, P.OrFix<"Q", Next[0]["_C"], P.OrFix<"Q", FC, FQ>>, P.OrFix<"W", Next[0]["_C"], P.OrFix<"W", FC, FW>>, P.OrFix<"X", Next[0]["_C"], P.OrFix<"X", FC, FX>>, P.OrFix<"I", Next[0]["_C"], P.OrFix<"I", FC, FI>>, P.OrFix<"S", Next[0]["_C"], P.OrFix<"S", FC, FS>>, P.OrFix<"R", Next[0]["_C"], P.OrFix<"R", FC, FR>>, P.OrFix<"E", Next[0]["_C"], P.OrFix<"E", FC, FE>>, any>[Next[0]["_F"]] : import("@effect-ts/system/Collections/Immutable/Dictionary/index.js").Dictionary<A>>[Next[0]["_F"]] : import("@effect-ts/system/Collections/Immutable/Dictionary/index.js").Dictionary<A>>[Next[0]["_F"]] : import("@effect-ts/system/Collections/Immutable/Dictionary/index.js").Dictionary<A>>[Next[0]["_F"]] : import("@effect-ts/system/Collections/Immutable/Dictionary/index.js").Dictionary<A>>[Next[0]["_F"]] : import("@effect-ts/system/Collections/Immutable/Dictionary/index.js").Dictionary<A>>[Next[0]["_F"]] : import("@effect-ts/system/Collections/Immutable/Dictionary/index.js").Dictionary<A>>[Next[0]["_F"]] : import("@effect-ts/system/Collections/Immutable/Dictionary/index.js").Dictionary<A>>[Next[0]["_F"]] : import("@effect-ts/system/Collections/Immutable/Dictionary/index.js").Dictionary<A>>[Next[0]["_F"]] : import("@effect-ts/system/Collections/Immutable/Dictionary/index.js").Dictionary<A>>[Next[0]["_F"]] : import("@effect-ts/system/Collections/Immutable/Dictionary/index.js").Dictionary<A>>[F[0]["_F"]] : import("@effect-ts/system/Collections/Immutable/Dictionary/index.js").Dictionary<A>;
/**
 * Matchers
 */
export declare const match: <N extends string>(tag: N) => P.MatchFn<[P.URI<"Dictionary", {}>], P.Auto, N>, matchIn: <N extends string>(tag: N) => P.MatchInFn<[P.URI<"Dictionary", {}>], P.Auto, N>, matchMorph: <N extends string, X extends { [tag in N]: string; }>(MorphADT: {
    tag: N;
    _A: X;
}) => P.MatchMorphFn<[P.URI<"Dictionary", {}>], P.Auto, N, X>, matchTag: P.MatchFn<[P.URI<"Dictionary", {}>], P.Auto, "_tag">, matchTagIn: P.MatchInFn<[P.URI<"Dictionary", {}>], P.Auto, "_tag">;
/**
 * Conditionals
 */
declare const branch: <X extends import("@effect-ts/system/Collections/Immutable/Dictionary/index.js").Dictionary<any>, Y extends import("@effect-ts/system/Collections/Immutable/Dictionary/index.js").Dictionary<any>>(onTrue: () => X, onFalse: () => Y) => (predicate: boolean) => import("@effect-ts/system/Collections/Immutable/Dictionary/index.js").Dictionary<P.Infer<[P.URI<"Dictionary", {}>], P.Auto, "A", X | Y>>;
declare const branch_: <X extends import("@effect-ts/system/Collections/Immutable/Dictionary/index.js").Dictionary<any>, Y extends import("@effect-ts/system/Collections/Immutable/Dictionary/index.js").Dictionary<any>>(predicate: boolean, onTrue: () => X, onFalse: () => Y) => import("@effect-ts/system/Collections/Immutable/Dictionary/index.js").Dictionary<P.Infer<[P.URI<"Dictionary", {}>], P.Auto, "A", X | Y>>;
export { branch as if, branch_ as if_ };
//# sourceMappingURL=dsl.d.ts.map