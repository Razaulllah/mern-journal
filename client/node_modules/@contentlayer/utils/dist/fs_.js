import { Tagged } from '@effect-ts/core/Case';
import { pipe, T, tag } from './effect/index.js';
import { errorToString } from './index.js';
export const FsTag = tag(Symbol('contentlayer:Fs'));
export const { fileOrDirExists, symlinkExists, stat, readFile, readFileBuffer, writeFile, writeFileJson, mkdirp, symlink, } = T.deriveLifted(FsTag)([
    'fileOrDirExists',
    'symlinkExists',
    'stat',
    'readFile',
    'readFileBuffer',
    'writeFile',
    'writeFileJson',
    'mkdirp',
    'symlink',
], [], []);
// NOTE the following functions can't be easily lifted
export const readFileJson = (filePath) => T.accessServiceM(FsTag)((_) => _.readFileJson(filePath));
export const readFileJsonIfExists = (filePath) => T.accessServiceM(FsTag)((_) => _.readFileJsonIfExists(filePath));
export function rm(path, params = {}) {
    return pipe(T.accessServiceM(FsTag)((_) => _.rm(path, params)));
}
export class FileNotFoundError extends Tagged('fs.FileNotFoundError') {
}
export class FileOrDirNotFoundError extends Tagged('fs.FileOrDirNotFoundError') {
}
export class ReadFileError extends Tagged('fs.ReadFileError') {
}
export class StatError extends Tagged('fs.StatError') {
}
export class WriteFileError extends Tagged('fs.WriteFileError') {
}
export class MkdirError extends Tagged('fs.MkdirError') {
}
export class RmError extends Tagged('fs.RmError') {
}
export class SymlinkError extends Tagged('fs.SymlinkError') {
}
export class UnknownFSError extends Tagged('fs.UnknownFSError') {
    constructor() {
        super(...arguments);
        this.toString = () => `UnknownFSError: ${errorToString(this.error)} ${this.error.stack}`;
    }
}
export class JsonParseError extends Tagged('fs.JsonParseError') {
}
export class JsonStringifyError extends Tagged('fs.JsonStringifyError') {
}
//# sourceMappingURL=fs_.js.map