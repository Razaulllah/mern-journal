/// <reference types="node" />
import type { Stats } from 'node:fs';
import type { JsonValue } from 'type-fest';
import { L, OT, T } from './effect/index.js';
import type { SymlinkType } from './fs_.js';
import { FileNotFoundError, FileOrDirNotFoundError, JsonParseError, JsonStringifyError, MkdirError, ReadFileError, RmError, StatError, SymlinkError, WriteFileError } from './fs_.js';
export declare const fileOrDirExists: (pathLike: string) => T.Effect<OT.HasTracer, StatError, boolean>;
export declare const symlinkExists: (pathLike: string) => T.Effect<unknown, StatError, boolean>;
export declare const stat: (filePath: string) => T.Effect<unknown, FileNotFoundError | StatError, Stats>;
export declare const readFile: (filePath: string) => T.Effect<OT.HasTracer, ReadFileError | FileNotFoundError, string>;
export declare const readFileBuffer: (filePath: string) => T.Effect<OT.HasTracer, ReadFileError | FileNotFoundError, Buffer>;
export declare const readFileJson: <T extends JsonValue = JsonValue>(filePath: string) => T.Effect<OT.HasTracer, FileNotFoundError | ReadFileError | JsonParseError, T>;
export declare const readFileJsonIfExists: <T extends JsonValue = JsonValue>(filePath: string) => T.Effect<OT.HasTracer, StatError | ReadFileError | JsonParseError, T | undefined>;
export declare const writeFile: (filePath: string, content: string) => T.Effect<OT.HasTracer, WriteFileError, void>;
export declare const writeFileJson: ({ filePath, content, }: {
    filePath: string;
    content: JsonValue;
}) => T.Effect<OT.HasTracer, WriteFileError | JsonStringifyError, void>;
export declare const mkdirp: <T extends string>(dirPath: T) => T.Effect<OT.HasTracer, MkdirError, void>;
export declare function rm(path: string, params: {
    force: true;
    recursive?: boolean;
}): T.Effect<OT.HasTracer, RmError, void>;
export declare function rm(path: string, params?: {
    force?: false;
    recursive?: boolean;
}): T.Effect<OT.HasTracer, RmError | FileOrDirNotFoundError, void>;
/**
 * NOTE: symlinks are not supported widely on Windows
 */
export declare const symlink: ({ targetPath, symlinkPath, type, }: {
    targetPath: string;
    symlinkPath: string;
    type: SymlinkType;
}) => T.Effect<OT.HasTracer, SymlinkError, void>;
export declare const InMemoryFsLive: L.Layer<unknown, never, import("@effect-ts/system/Has/index.js").Has<import("./fs_.js").Fs>>;
//# sourceMappingURL=fs-in-memory.d.ts.map